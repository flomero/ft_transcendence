<h2>Chat!</h2>

<div id="chat-container" class="grid grid-cols-4 gap-4 w-full">
    <div id="chat-rooms" class="col-span-1">
        {{#each rooms}}
            {{> components/chat/room room=this}}
        {{/each}}
    </div>
    {{> components/chat/messages messages=messages}}
</div>

<style>
    .chat-message {
        margin-bottom: 15px;
        padding: 10px;
        border-radius: 8px;
        max-width: 70%;
    }
    
    .chat-message-own {
        background-color: #DCF8C6;
        margin-left: auto;
        margin-right: 10px;
    }
    
    .chat-message-other {
        background-color: #F2F2F2;
        margin-right: auto;
        margin-left: 10px;
    }
    
    .chat-message-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 5px;
        font-size: 0.8rem;
    }
    
    .chat-message-username {
        font-weight: bold;
        color: #555;
    }
    
    .chat-message-time {
        color: #999;
    }
    
    .chat-message-content {
        word-wrap: break-word;
    }
</style>

<script>
    const currentUrl = window.location.origin;
    const wsProtocol = currentUrl.startsWith('https') ? 'wss' : 'ws';
    const wsUrl = currentUrl.replace(/^http/, 'ws');
    const socket = new WebSocket(`${wsUrl}/chat/ws`);

    let currentRoomId = null;

    socket.onmessage = function (event) {
        const data = JSON.parse(event.data);
        const messageContainer = document.getElementById('chat-messages');
        messageContainer.innerHTML += data.html;
    }

    function sendMessage(event) {
        event.preventDefault();
        const message = event.target.message.value;
        if (message.trim() === '') {
            return;
        }

        fetch(`/chat/${currentRoomId}`, {
            method: 'POST',
            body: message.toString(),
        })
        .then(response => response.json())
        .then(data => { 
            event.target.reset();
        })
        .catch(error => {
            console.error('Error sending message:', error);
        });
    }

    function selectRoom(event) {
        const clickedRoom = event.target;
        
        if (!clickedRoom) {
            console.error('No room element found');
            return;
        }

        const roomElement = clickedRoom.closest('[data-room-id]');
        if (!roomElement) {
            console.error('No room element found with data-room-id');
            return;
        }
        
        const roomId = roomElement.getAttribute('data-room-id');
        if (!roomId) {
            console.error('No room ID found');
            return;
        }

        if (currentRoomId === roomId) {
            return;
        }

        fetch(`/chat/${roomId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(html => {
                const messageContainer = document.getElementById('chat-messages-container');
                messageContainer.outerHTML = html;
                currentRoomId = roomId;
            })
            .catch(error => {
                console.error('Error fetching room messages:', error);
            });
    }
</script>