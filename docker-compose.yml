version: "3.8"

services:
  vault: # dev setup for easy testing
    image: vault:1.12.3
    container_name: my_vault
    command: sh -c "vault server -dev -dev-root-token-id=root -dev-listen-address=0.0.0.0:8200 & sleep 2 && vault kv put secret/django POSTGRES_DB=django_db POSTGRES_USER=django_user POSTGRES_PASSWORD=django_password SECRET_KEY=dev_secret_key && vault kv put secret/oauth OAUTH2_CLIENT_ID=test OAUTH2_CLIENT_SECRET=test && wait"
    environment:
      VAULT_ADDR: "http://0.0.0.0:8200"
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: transcendence_node_app
    volumes:
      - ./app:/app  # Mount for development
      - /app/node_modules  # Prevent overwriting node_modules
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      vault:
        condition: service_healthy
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - NODE_ENV=development
    command: npm run dev  # Use development mode with hot reload
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "4000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=your_secure_password

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    restart: unless-stopped



volumes:
  db_data:
  prometheus-data:
  grafana-data: